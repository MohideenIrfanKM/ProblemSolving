public class Solution {
    public int MaxSubArray(int[] nums) {
        int Maxsum=nums[0];
        int prev=nums[0];
        for(int i=1;i<nums.Length;i++)
        {
            prev=Math.Max(nums[i],nums[i]+prev);
            Maxsum=Math.Max(prev,Maxsum);
        }
        return Maxsum;

        
    }
}

//bottom up  approach
// public class Solution {
//     public int MaxSubArray(int[] nums) {
//         int n = nums.Length;
//         int[] dp = new int[n];
//         Array.Fill(dp, -1);

//         int maxSum = int.MinValue; // Initialize maxSum to a minimum value, e.g., 0 or int.MinValue.

//         for (int i = 0; i < n; i++) {
//             maxSum = Math.Max(maxSum, MaxSubarraySumHelper(nums, i, dp));
//         }

//         return maxSum;
//     }

//     public int MaxSubarraySumHelper(int[] nums, int i, int[] dp) {
//         if (i == 0) {
//             dp[i] = nums[i];
//             return dp[i];
//         }

//         if (dp[i] != -1) {
//             return dp[i];
//         }

//         dp[i] = Math.Max(nums[i], nums[i] + MaxSubarraySumHelper(nums, i - 1, dp));
//         return dp[i];
//     }
// }
